{
  "meta": {
    "kind": "loading",
    "path": "loading-with-preloading-data",
    "title": "Loading with Preloading Data",
    "description": "\nAnother way to prevent waterfalls is to use the preload pattern.\nYou can optionally create a preload function to further optimize parallel data fetching. With this approach, you don't have to pass promises down as props. The preload function can also have any name as it's a pattern, not an API.\n  ",
    "doc": "https://nextjs.org/docs/app/building-your-application/data-fetching/patterns#preloading-data"
  },
  "codes": {
    "_components/basic.tsx": "import { notFound } from \"next/navigation\";\nimport { getItem, isSignIn } from \"../_utils/api\";\n\nexport async function Basic() {\n  const signedIn = await isSignIn();\n\n  if (!signedIn) {\n    return notFound();\n  }\n\n  await getItem(2);\n\n  return <span>loaded!</span>;\n}\n",
    "_components/loading.tsx": "export function Loading() {\n  return <span>loading...</span>;\n}\n",
    "_components/preload.tsx": "import { notFound } from \"next/navigation\";\nimport { getItem, isSignIn } from \"../_utils/api\";\n\nconst preload = (id: number) => {\n  // void evaluates the given expression and returns undefined\n  // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/void\n  void getItem(id);\n};\n\nasync function Item({ id }: { id: number }) {\n  await getItem(id);\n\n  return <span>loaded!</span>;\n}\n\nexport async function Preload() {\n  preload(1);\n\n  const signedIn = await isSignIn();\n\n  if (!signedIn) {\n    return notFound();\n  }\n\n  return <Item id={1} />;\n}\n",
    "_utils/api.ts": "import { cache } from \"react\";\n\n// if you use `fetch`, you won't need to use `cache` since `fetch` has cache system\nexport const getItem = cache(async (id: number) => {\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  return id;\n});\n\nexport async function isSignIn() {\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  return true;\n}\n",
    "page.tsx": "import { Suspense } from \"react\";\nimport { Basic } from \"./_components/basic\";\nimport { Loading } from \"./_components/loading\";\nimport { Preload } from \"./_components/preload\";\n\n// turn off full route cache for demo\nexport const dynamic = \"force-dynamic\";\n\nexport default async function Page() {\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <p className=\"text-gray-400\">\n        Preload component doesn't wait for serial communication\n      </p>\n      <div>\n        <span>Preload: </span>\n        <Suspense fallback={<Loading />}>\n          <Preload />\n        </Suspense>\n      </div>\n      <div>\n        <span>Basic: </span>\n        <Suspense fallback={<Loading />}>\n          <Basic />\n        </Suspense>\n      </div>\n    </div>\n  );\n}\n"
  }
}