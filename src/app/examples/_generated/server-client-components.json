{
  "meta": {
    "kind": "basic",
    "path": "server-client-components",
    "title": "Server and Client Components",
    "description": "\nBy default, Next.js uses Server Components. This allows you to automatically implement server rendering with no additional configuration, and you can opt into using Client Components when needed\n\nReact Server Components allow you to write UI that can be rendered and optionally cached on the server. In Next.js, the rendering work is further split by route segments to enable streaming and partial rendering\n\nClient Components allows you to write interactive UI that can be rendered on the client at request time. In Next.js, client rendering is opt-in, meaning you have to explicitly decide what components React should render on the client.\n  ",
    "doc": "https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns"
  },
  "codes": {
    "page.tsx": "import { Client } from \"./_components/client\";\nimport { ClientHavingServer } from \"./_components/clientHavingServer\";\nimport { Server } from \"./_components/server\";\nimport { ServerHavingClient } from \"./_components/serverHavingClient\";\n\nexport default function Page() {\n  return (\n    <div className=\"flex flex-col gap-1\">\n      <Labels />\n      <div className=\"grid grid-cols-2 gap-2\">\n        <Client file=\"page.tsx\">\n          <Server>\n            <Client>\n              <Server />\n            </Client>\n          </Server>\n        </Client>\n\n        <Server file=\"page.tsx\">\n          <Client>\n            {/* You can pass a Server Component as a child or prop of a Client Component. */}\n            <Server>\n              <Client />\n            </Server>\n          </Client>\n        </Server>\n\n        <ClientHavingServer />\n\n        <ServerHavingClient />\n      </div>\n    </div>\n  );\n}\n\nfunction Labels() {\n  return (\n    <div className=\"flex gap-4 justify-end\">\n      <p>server: blue</p>\n      <p>client: red</p>\n    </div>\n  );\n}\n",
    "_components/serverHavingClient.tsx": "import { Box } from \"./box\";\nimport { Client } from \"./client\";\nimport { Server } from \"./server\";\n\nexport function ServerHavingClient() {\n  let isClientComponent = false;\n\n  if (typeof window !== \"undefined\") {\n    isClientComponent = true;\n  }\n\n  return (\n    <Box\n      type=\"server\"\n      actualType={isClientComponent ? \"client\" : \"server\"}\n      file=\"_components/serverHavingClient.tsx\"\n    >\n      <Client>\n        <Server />\n      </Client>\n    </Box>\n  );\n}\n",
    "_components/server.tsx": "import { type PropsWithChildren } from \"react\";\nimport { Box } from \"./box\";\n\ntype Props = PropsWithChildren<{\n  file?: string;\n}>;\n\nexport function Server({ file, children }: Props) {\n  let isClientComponent = false;\n\n  if (typeof window !== \"undefined\") {\n    // occurring hydration error because generated html on server is mismatched\n    isClientComponent = true;\n  }\n\n  return (\n    <Box\n      type=\"server\"\n      actualType={isClientComponent ? \"client\" : \"server\"}\n      file={file}\n    >\n      {children}\n    </Box>\n  );\n}\n",
    "_components/clientHavingServer.tsx": "// ðŸ‘Ž Don't import server components from client components then\n// server components will run on browser side.\n// Alternatively, You can pass a Server Component as a child or prop of a Client Component.\n\n\"use client\";\n\nimport { Box } from \"./box\";\nimport { Server } from \"./server\";\n\nexport function ClientHavingServer() {\n  return (\n    <Box type=\"client\" file=\"_components/clientHavingServer.tsx\">\n      <Server>\n        <Server />\n      </Server>\n    </Box>\n  );\n}\n",
    "_components/client.tsx": "\"use client\";\n\nimport { type PropsWithChildren } from \"react\";\nimport { Box } from \"./box\";\n\ntype Props = PropsWithChildren<{\n  file?: string;\n}>;\n\nexport function Client({ file, children }: Props) {\n  return (\n    <Box type=\"client\" file={file}>\n      {children}\n    </Box>\n  );\n}\n",
    "_components/box.tsx": "import { convertFilePathToURLParam } from \"@/app/_utils/filePath\";\nimport Link from \"next/link\";\nimport { PropsWithChildren } from \"react\";\n\ntype Type = \"server\" | \"client\";\n\ntype Props = PropsWithChildren<{\n  type: Type;\n  actualType?: Type;\n  file?: string;\n}>;\n\nexport function Box({ type, actualType, file, children }: Props) {\n  return (\n    <div\n      className={[\n        \"flex flex-col gap-2 p-1 border border-gray-400 rounded-md\",\n        (actualType ?? type) === \"client\" ? \"bg-orange-800\" : \"bg-sky-800\",\n      ].join(\" \")}\n    >\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-lg\">{type}</p>\n        {file && (\n          <Link\n            href={`/examples/server-client-components?file-path=${convertFilePathToURLParam(\n              file,\n            )}`}\n            className=\"text-sm text-gray-300\"\n          >\n            Code\n          </Link>\n        )}\n      </div>\n      <div className=\"ml-4\">{children}</div>\n    </div>\n  );\n}\n"
  }
}