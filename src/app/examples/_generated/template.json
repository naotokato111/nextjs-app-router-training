{
  "meta": {
    "kind": "basic",
    "path": "template",
    "title": "Template",
    "description": "\nTemplates are similar to layouts in that they wrap each child layout or page.\nUnlike layouts that persist across routes and maintain state, templates create a new instance for each of their children on navigation. This means that when a user navigates between routes that share a template, a new instance of the component is mounted, DOM elements are recreated, state is not preserved, and effects are re-synchronized.\n\nThere may be cases where you need those specific behaviors, and templates would be a more suitable option than layouts. For example:\n\n- Features that rely on useEffect (e.g logging page views) and useState (e.g a per-page feedback form).\n- To change the default framework behavior. For example, Suspense Boundaries inside layouts only show the fallback the first time the Layout is loaded and not when switching pages. For templates, the fallback is shown on each navigation.\n  ",
    "doc": "https://nextjs.org/docs/app/building-your-application/routing/pages-and-layouts#templates"
  },
  "codes": {
    "_components/box.tsx": "import { type PropsWithChildren } from \"react\";\n\ntype Props = PropsWithChildren<{\n  title: string;\n}>;\n\nexport function Box({ title, children }: Props) {\n  return (\n    <div className=\"flex flex-col gap-2 border border-gray-600 p-2\">\n      <h2 className=\"text-lg\">{title}</h2>\n      <div className=\"mx-4\">{children}</div>\n    </div>\n  );\n}\n",
    "_components/form.tsx": "export function Form() {\n  return (\n    <form className=\"my-2\">\n      <label>\n        <span>✍️ </span>\n        <input\n          type=\"text\"\n          className=\"bg-gray-600 rounded-sm ml-2 text-gray-100\"\n        />\n      </label>\n    </form>\n  );\n}\n",
    "child/page.tsx": "import { Box } from \"../_components/box\";\n\nexport default function Page() {\n  return <Box title=\"Child Page\" />;\n}\n",
    "child/template.tsx": "import { PropsWithChildren } from \"react\";\nimport { Box } from \"../_components/box\";\n\nexport default function Template({ children }: PropsWithChildren) {\n  return <Box title=\"Child Template\">{children}</Box>;\n}\n",
    "layout.tsx": "import { type PropsWithChildren } from \"react\";\nimport { Box } from \"./_components/box\";\nimport { Form } from \"./_components/form\";\n\nexport default function Layout({ children }: PropsWithChildren) {\n  return (\n    <Box title=\"Layout\">\n      <p className=\"text-gray-400\">\n        Please input messages and then go to the child page, Input of layout\n        will keep the value, which means not re-rendering even if changing\n        pages.\n      </p>\n      <Form />\n      {children}\n    </Box>\n  );\n}\n",
    "page.tsx": "import Link from \"next/link\";\nimport { Box } from \"./_components/box\";\n\nexport default function Page() {\n  return (\n    <Box title=\"page\">\n      <Link\n        href=\"/examples/template/child\"\n        className=\"block border border-gray-400 p-1 w-full text-center rounded-sm\"\n      >\n        go to the child page\n      </Link>\n    </Box>\n  );\n}\n",
    "template.tsx": "import { type PropsWithChildren } from \"react\";\nimport { Box } from \"./_components/box\";\nimport { Form } from \"./_components/form\";\n\nexport default function Template({ children }: PropsWithChildren) {\n  return (\n    <Box title=\"Template\">\n      <Form />\n      {children}\n    </Box>\n  );\n}\n"
  }
}