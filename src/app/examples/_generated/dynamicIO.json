{
  "meta": {
    "kind": "caching",
    "path": "dynamicIO",
    "title": "dynamicIO (use cache)",
    "doc": "https://nextjs.org/docs/canary/app/api-reference/directives/use-cache",
    "description": "\nThe use cache directive designates a component, function, or file to be cached.\nIt can be used at the top of a file to indicate that all functions in the file are cacheable, or inline at the top of a function to mark the function as cacheable.\nThis is an experimental Next.js feature, and not a native React feature like use client or use server.\n\nCaching is a technique to improve the performance of web applications by storing the results of computations or data fetches. In Next.js you can use caching to optimize your applications rendering performance.\n\nTo explicitly cache certain asynchronous operations and achieve static behavior, you can use the use cache directive. This allows you to optimize rendering performance by caching results from async data requests, while still enabling dynamic rendering when needed.\n\nThe use cache directive is an experimental feature that aims to replace the unstable_cache function. Unlike unstable_cache, which is limited to caching JSON data and requires manual definition of revalidation periods and tags, use cache offers more flexibility. It allows you to cache a wider range of data, including anything that React Server Components (RSC) can serialize, as well as data-fetching outputs and component outputs.\n\nAdditionally, use cache automatically manages complexities by tracking both inputs and outputs, making it less likely for you to accidentally poison your cache. Since it serializes both inputs and outputs, you can avoid issues with incorrect cache retrieval.\n      "
  },
  "codes": {
    "directive/component-level/page.tsx": "// [!code word:use cache]\n\nexport default async function Page() {\n  return (\n    <div className=\"space-y-4\">\n      <NoCached />\n      <Cached />\n    </div>\n  );\n}\n\nasync function NoCached() {\n  return <p>no cached: {performance.now()}</p>;\n}\n\nasync function Cached() {\n  \"use cache\";\n\n  return <p>cached: {performance.now()}</p>;\n}\n",
    "directive/file-level/page.tsx": "// [!code word:use cache]\n\n\"use cache\";\n\nexport default async function Page() {\n  return (\n    <div>\n      <p>{performance.now()}</p>\n      <Child />\n    </div>\n  );\n}\n\nfunction Child() {\n  return <p>{performance.now()}</p>;\n}\n",
    "directive/function-level/page.tsx": "// [!code word:use cache]\n\nexport default async function Page() {\n  return (\n    <div>\n      <p>no cached: {performance.now()}</p>\n      <p>cached: {getNow()}</p>\n    </div>\n  );\n}\n\nasync function getNow() {\n  \"use cache\";\n\n  return performance.now();\n}\n",
    "page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { Link } from \"@/app/_components/link\";\n\nexport default async function Page() {\n  return (\n    <Boundary label=\"Root Page\" filePath=\"page.tsx\">\n      <div className=\"space-y-3\">\n        <h2>\"use cache\" directive</h2>\n        <div className=\"flex flex-col gap-3 ml-4\">\n          <Link href=\"/examples/dynamicIO/directive/file-level?file-path=dynamicIO/directive/file-level/page.tsx\">\n            File Level Directive\n          </Link>\n          <Link href=\"/examples/dynamicIO/directive/component-level?file-path=dynamicIO/directive/component-level/page.tsx\">\n            Component Level Directive\n          </Link>\n          <Link href=\"/examples/dynamicIO/directive/function-level?file-path=dynamicIO/directive/function-level/page.tsx\">\n            Function Level Directive\n          </Link>\n        </div>\n        <h2>Revalidating</h2>\n        <div className=\"flex flex-col gap-3 ml-4\">\n          <Link href=\"/examples/dynamicIO/revalidating/cacheLife?file-path=dynamicIO/revalidating/cacheLife/page.tsx\">\n            cacheLife\n          </Link>\n          <Link href=\"/examples/dynamicIO/revalidating/cacheTag?file-path=dynamicIO/revalidating/cacheTag/page.tsx\">\n            cacheTag\n          </Link>\n        </div>\n      </div>\n    </Boundary>\n  );\n}\n",
    "revalidating/cacheLife/Child.tsx": "// [!code word:cacheLife]\n\n\"use cache\";\n\nimport { unstable_cacheLife as cacheLife } from \"next/cache\";\n\nexport async function Child() {\n  // This component's cache will respect the shorter 'seconds' profile\n  cacheLife(\"seconds\");\n\n  return <p>{`cached component: ${performance.now()}`}</p>;\n}\n",
    "revalidating/cacheLife/getTime.ts": "// [!code word:cacheLife]\nimport { unstable_cacheLife as cacheLife } from \"next/cache\";\n\nexport function getTime() {\n  cacheLife(\"days\");\n\n  return performance.now();\n}\n",
    "revalidating/cacheLife/page.tsx": "// [!code word:cacheLife]\n\nimport { unstable_cacheLife as cacheLife } from \"next/cache\";\nimport { Child } from \"./Child\";\nimport { getTime } from \"./getTime\";\n\nexport default async function Page() {\n  \"use cache\";\n  // https://nextjs.org/docs/canary/app/api-reference/directives/use-cache#default-cache-profiles\n  cacheLife(\"days\");\n\n  return (\n    <div>\n      <p>{`cached: {performance.now()}`}</p>\n      <Child />\n      <p>{`cached function: ${getTime()}`}</p>\n    </div>\n  );\n}\n",
    "revalidating/cacheTag/page.tsx": "// [!code word:cacheTag]\n\nimport { Button } from \"@/app/_components/button\";\nimport { unstable_cacheTag as cacheTag, revalidateTag } from \"next/cache\";\n\nexport default async function Page() {\n  \"use cache\";\n\n  cacheTag(\"data\");\n\n  return (\n    <div className=\"space-y-5\">\n      <p>cached: {performance.now()}</p>\n      <form action={purge}>\n        <Button type=\"submit\">Purge</Button>\n      </form>\n      <form action={noPurge}>\n        <Button type=\"submit\">No purge</Button>\n      </form>\n    </div>\n  );\n}\n\nasync function purge() {\n  \"use server\";\n\n  revalidateTag(\"data\");\n}\n\nasync function noPurge() {\n  \"use server\";\n\n  revalidateTag(\"data2\");\n}\n"
  }
}