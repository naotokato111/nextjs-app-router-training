{
  "meta": {
    "kind": "server actions",
    "path": "server-actions-optimism",
    "title": "Optimistic Updates",
    "description": "\nuseOptimistic is a React Hook that lets you show a different state while an async action is underway.\nIt accepts some state as an argument and returns a copy of that state that can be different during the duration of an async action such as a network request.\nYou provide a function that takes the current state and the input to the action, and returns the optimistic state to be used while the action is pending.\n\nThis state is called the “optimistic” state because it is usually used to immediately present the user with the result of performing an action, even though the action actually takes time to complete.\n    ",
    "doc": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#optimistic-updates"
  },
  "codes": {
    "page.tsx": "\"use client\";\n\nimport { useOptimistic, useRef, useState } from \"react\";\nimport { type Message, post } from \"./actions\";\n\ntype OptimisticMessage = Message & { sending: boolean };\n\nexport default function Page() {\n  const ref = useRef<HTMLFormElement>(null);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [optimisticMessages, addOptimisticMessage] = useOptimistic<\n    OptimisticMessage[]\n  >(\n    messages,\n    // @ts-expect-error type definition is wrong\n    (state: Message[], newMessage: string) => [\n      ...state,\n      { message: newMessage, sending: true },\n    ],\n  );\n\n  const onSubmit = async (formData: FormData) => {\n    const message = formData.get(\"message\");\n\n    if (typeof message === \"string\" && message.length > 0) {\n      addOptimisticMessage(message);\n      setMessages((messages) => [...messages, { message }]);\n      ref?.current?.reset();\n      await post(message);\n    }\n  };\n\n  return (\n    <div>\n      <form action={onSubmit} ref={ref} className=\"flex gap-4\">\n        <input type=\"text\" name=\"message\" className=\"bg-slate-600 flex-1\" />\n        <button type=\"submit\">Submit</button>\n      </form>\n      {optimisticMessages.map(({ message, sending }, i) => (\n        <p key={i}>\n          {message}\n          {sending && <small> (Sending...)</small>}\n        </p>\n      ))}\n    </div>\n  );\n}\n",
    "actions.ts": "\"use server\";\n\nexport type Message = {\n  message: string;\n};\n\nexport async function post(message: Message[\"message\"]) {\n  await new Promise((res) => setTimeout(res, 1000));\n\n  return message;\n}\n"
  }
}