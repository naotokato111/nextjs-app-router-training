{
  "meta": {
    "kind": "route-handlers",
    "path": "route-handlers",
    "title": "Route Handlers",
    "description": "\nRoute Handlers allow you to create custom request handlers for a given route using the Web Request and Response APIs.\nRoute Handlers can be nested inside the app directory, similar to page.js and layout.js. But there cannot be a route.js file at the same route segment level as page.js.\n    ",
    "doc": "https://nextjs.org/docs/app/building-your-application/routing/route-handlers"
  },
  "codes": {
    "api/dynamic/route.ts": "import { cookies, headers } from \"next/headers\";\nimport { NextRequest, NextResponse } from \"next/server\";\n\nconst COOKIE_NAME = \"example-route-handlers\";\n\n// when use headers or cookies or searchParams, this response will be dynamic\nexport async function GET(req: NextRequest, res: NextResponse) {\n  const referer = headers().get(\"referer\");\n  const cookie = cookies().get(COOKIE_NAME);\n\n  req.nextUrl.searchParams;\n\n  return NextResponse.json({ msg: Date.now() });\n}\n",
    "api/revalidate/route.ts": "import { NowResponse } from \"@/constants\";\nimport { NextRequest, NextResponse } from \"next/server\";\n\nexport async function GET(req: NextRequest, res: NextResponse) {\n  const { now }: NowResponse = await (\n    await fetch(`${process.env.NEXT_PUBLIC_EXTERNAL_URL}/api/now`, {\n      next: {\n        revalidate: 3,\n      },\n    })\n  ).json();\n\n  return NextResponse.json({ msg: now });\n}\n",
    "api/static/route.ts": "import { NextRequest, NextResponse } from \"next/server\";\n\nexport async function GET(req: NextRequest, res: NextResponse) {\n  return NextResponse.json({ msg: Date.now() });\n}\n",
    "page.tsx": "\"use client\";\n\nimport { Boundary } from \"@/app/_components/boundary\";\nimport { useFetch } from \"@/app/_hooks/useFetch\";\n\nexport default function Page() {\n  const { data: staticData } = useFetch<{ msg: string }>(\n    \"/examples/route-handlers/api/static\",\n  );\n  const { data: dynamicData } = useFetch<{ msg: string }>(\n    \"/examples/route-handlers/api/dynamic\",\n  );\n  const { data: revalidateData } = useFetch<{ msg: string }>(\n    \"/examples/route-handlers/api/revalidate\",\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <Boundary label=\"Static\" filePath=\"api/static/route.ts\">\n        <p>{staticData?.msg ?? \"loading\"}</p>\n      </Boundary>\n      <Boundary label=\"Dynamic\" filePath=\"api/dynamic/route.ts\">\n        <p className=\"break-all\">{dynamicData?.msg ?? \"loading\"}</p>\n      </Boundary>\n      <Boundary label=\"Revalidate (3s)\" filePath=\"api/revalidate/route.ts\">\n        <p>{revalidateData?.msg ?? \"loading\"}</p>\n      </Boundary>\n    </div>\n  );\n}\n"
  }
}