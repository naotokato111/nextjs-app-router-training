{
  "meta": {
    "kind": "caching",
    "path": "data-cache",
    "title": "Data Cache (@server)",
    "description": "\nNext.js has a built-in Data Cache that persists the result of data fetches across incoming server requests and deployments.\nThis is possible because Next.js extends the native fetch API to allow each request on the server to set its own persistent caching semantics.\n      ",
    "doc": "https://nextjs.org/docs/app/building-your-application/caching#data-cache"
  },
  "codes": {
    "fetch/no-store/page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { NOW_API_ENDPOINT, NowResponse } from \"@/constants\";\nimport { unstable_noStore } from \"next/cache\";\n\nexport default async function Page() {\n  unstable_noStore();\n\n  const { now }: NowResponse = await (await fetch(NOW_API_ENDPOINT)).json();\n\n  return <Boundary label=\"no-store\">{now}</Boundary>;\n}\n",
    "fetch/page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { Link } from \"@/app/_components/link\";\nimport { NOW_API_ENDPOINT, NowResponse } from \"@/constants\";\n\nexport default async function Page() {\n  const { now }: NowResponse = await (await fetch(NOW_API_ENDPOINT)).json();\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <Boundary label=\"force-cache\">{now}</Boundary>\n      <Link href=\"/examples/data-cache/fetch/no-store?file-path=fetch/no-store/page.tsx\">\n        No store cache\n      </Link>\n      <Link href=\"/examples/data-cache/fetch/revalidate?file-path=fetch/revalidate/page.tsx\">\n        Revalidating cache\n      </Link>\n    </div>\n  );\n}\n",
    "fetch/revalidate/layout.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { NOW_API_ENDPOINT, NowResponse } from \"@/constants\";\nimport { PropsWithChildren } from \"react\";\n\nexport default async function Layout({ children }: PropsWithChildren) {\n  const { now }: NowResponse = await (await fetch(NOW_API_ENDPOINT)).json();\n\n  return (\n    <Boundary label=\"Revalidation\">\n      <Boundary label=\"layout: force-cache\">\n        <p className=\"text-sm text-gray-400\">\n          layout depends on child's config\n        </p>\n        <p>{now}</p>\n      </Boundary>\n      {children}\n    </Boundary>\n  );\n}\n",
    "fetch/revalidate/page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { Link } from \"@/app/_components/link\";\nimport { NOW_API_ENDPOINT, NowResponse } from \"@/constants\";\n\nexport default async function Page() {\n  const { now }: NowResponse = await (\n    await fetch(NOW_API_ENDPOINT, {\n      next: {\n        revalidate: 3,\n      },\n    })\n  ).json();\n\n  return (\n    <div>\n      <Boundary label=\"Time-based Revalidation\">\n        <div className=\"flex flex-col gap-6\">\n          <p>3s: {now}</p>\n        </div>\n      </Boundary>\n      <Boundary label=\"On-Demand Revalidation\">\n        <div className=\"flex flex-col gap-2\">\n          <div className=\"flex justify-around\">\n            <Link href=\"/examples/data-cache/fetch/revalidate/revalidate-path?file-path=fetch/revalidate/revalidate-path/page.tsx\">\n              revalidatePath\n            </Link>\n            <Link href=\"/examples/data-cache/fetch/revalidate/revalidate-tag?file-path=fetch/revalidate/revalidate-tag/page.tsx\">\n              revalidateTag\n            </Link>\n          </div>\n        </div>\n      </Boundary>\n    </div>\n  );\n}\n",
    "fetch/revalidate/revalidate-path/page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { Button } from \"@/app/_components/button\";\nimport { NOW_API_ENDPOINT, NowResponse } from \"@/constants\";\nimport { revalidatePath } from \"next/cache\";\n\nexport default async function Page() {\n  async function update() {\n    \"use server\";\n\n    revalidatePath(\"/examples/data-cache/fetch/revalidate/revalidate-path\");\n  }\n\n  const data = await fetch(NOW_API_ENDPOINT);\n  const { now }: NowResponse = await data.json();\n\n  return (\n    <Boundary label=\"RevalidatePath\">\n      <div className=\"flex flex-col gap-4\">\n        <p>{now}</p>\n        <form action={update}>\n          <Button type=\"submit\">update</Button>\n        </form>\n      </div>\n    </Boundary>\n  );\n}\n",
    "fetch/revalidate/revalidate-tag/page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { Button } from \"@/app/_components/button\";\nimport { NOW_API_ENDPOINT, NowResponse } from \"@/constants\";\nimport { revalidateTag } from \"next/cache\";\n\nexport default async function Page() {\n  async function update() {\n    \"use server\";\n\n    revalidateTag(\"tag\");\n  }\n\n  const { now }: NowResponse = await (\n    await fetch(NOW_API_ENDPOINT, {\n      next: {\n        tags: [\"tag\"],\n      },\n    })\n  ).json();\n  const { now: noTag }: NowResponse = await (\n    await fetch(NOW_API_ENDPOINT, {\n      next: {\n        // the tag isn't matter when using server action\n        tags: [],\n      },\n    })\n  ).json();\n\n  return (\n    <Boundary label=\"RevalidateTag\">\n      <div className=\"flex flex-col gap-4\">\n        <div>\n          <p>tag: {now}</p>\n          <p>noTag: {noTag}</p>\n        </div>\n        <form action={update}>\n          <Button type=\"submit\">update</Button>\n        </form>\n      </div>\n    </Boundary>\n  );\n}\n",
    "no-fetch/no-store/page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { unstable_noStore } from \"next/cache\";\nimport { getNow } from \"../data\";\n\nexport default async function Page() {\n  unstable_noStore();\n\n  const now = await getNow();\n\n  return (\n    <Boundary label=\"no-store\" filePath=\"no-fetch/no-store/page.tsx\">\n      {now}\n    </Boundary>\n  );\n}\n",
    "no-fetch/page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { Link } from \"@/app/_components/link\";\nimport { unstable_cache } from \"next/cache\";\nimport { getNow } from \"./data\";\n\nconst getCachedNowWithId = unstable_cache(\n  async (id: string) => getNow(id),\n  // It must contain globally unique values that together identify the key of the data being cached.\n  // The cache key also includes the arguments passed to the function.\n  [\"data-with-param\"],\n);\n\nexport default async function Page() {\n  // build stage will cache the result of getNow() so it's ok to just run getNow()\n  const now = await getNow();\n  // also ok to run getCachedNowWithId() because it's cached\n  const nowWithId = await getCachedNowWithId(\"id\");\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <Boundary label=\"force-cache\">{now}</Boundary>\n      <Boundary label=\"force-cache with keyParts\">{nowWithId}</Boundary>\n      <Link href=\"/examples/data-cache/no-fetch/no-store?file-path=no-fetch/no-store/page.tsx\">\n        No store cache\n      </Link>\n      <Link href=\"/examples/data-cache/no-fetch/revalidate?file-path=no-fetch/revalidate/page.tsx\">\n        Revalidating cache\n      </Link>\n    </div>\n  );\n}\n",
    "no-fetch/revalidate/layout.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { PropsWithChildren } from \"react\";\nimport { getNow } from \"../data\";\n\nexport default async function Layout({ children }: PropsWithChildren) {\n  const now = await getNow();\n\n  return (\n    <Boundary label=\"Revalidation\">\n      <Boundary\n        label=\"layout: force-cache\"\n        filePath=\"no-fetch/revalidate/layout.tsx\"\n      >\n        <p className=\"text-sm text-gray-400\">\n          layout depends on child's config\n        </p>\n        <p>{now}</p>\n      </Boundary>\n      {children}\n    </Boundary>\n  );\n}\n",
    "no-fetch/revalidate/page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { Link } from \"@/app/_components/link\";\nimport { unstable_cache } from \"next/cache\";\nimport { getNow } from \"../data\";\n\nconst getCachedNow = unstable_cache(async () => getNow(), [], {\n  revalidate: 3,\n});\n\nexport default async function Page() {\n  const now = await getCachedNow();\n\n  return (\n    <div>\n      <Boundary\n        label=\"Time-based Revalidation\"\n        filePath=\"no-fetch/revalidate/page.tsx\"\n      >\n        <div className=\"flex flex-col gap-6\">\n          <p>3s: {now}</p>\n        </div>\n      </Boundary>\n      <Boundary label=\"On-Demand Revalidation\">\n        <div className=\"flex flex-col gap-2\">\n          <Link href=\"/examples/data-cache/no-fetch/revalidate/revalidate-tag?file-path=no-fetch/revalidate/revalidate-tag/page.tsx\">\n            revalidateTag\n          </Link>\n        </div>\n      </Boundary>\n    </div>\n  );\n}\n",
    "no-fetch/revalidate/revalidate-tag/page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { Button } from \"@/app/_components/button\";\nimport { revalidateTag, unstable_cache } from \"next/cache\";\nimport { getNow } from \"../../data\";\n\nconst getCachedNow = unstable_cache(async () => getNow(), [], {\n  tags: [\"tag\"],\n});\n\nexport default async function Page() {\n  async function update() {\n    \"use server\";\n\n    revalidateTag(\"tag\");\n  }\n\n  const now = await getCachedNow();\n\n  return (\n    <Boundary\n      label=\"revalidateTag\"\n      filePath=\"no-fetch/revalidate/revalidate-tag/page.tsx\"\n    >\n      <p>{now}</p>\n      <form action={update} className=\"mt-2\">\n        <Button type=\"submit\">update</Button>\n      </form>\n    </Boundary>\n  );\n}\n",
    "page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { Link } from \"@/app/_components/link\";\n\nexport default async function Page() {\n  return (\n    <Boundary label=\"Data Cache\">\n      <p className=\"text-gray-400\">\n        Next.js caches data when the build step is by default so the default\n        strategy is force-cache.\n      </p>\n      <div className=\"flex flex-col gap-4 mt-2\">\n        <Link href=\"/examples/data-cache/fetch?file-path=fetch/page.tsx\">\n          Fetch\n        </Link>\n        <Link href=\"/examples/data-cache/no-fetch?file-path=no-fetch/page.tsx\">\n          No Fetch\n        </Link>\n      </div>\n    </Boundary>\n  );\n}\n"
  }
}