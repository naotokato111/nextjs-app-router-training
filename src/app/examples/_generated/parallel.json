{
  "meta": {
    "kind": "parallel-routes",
    "path": "parallel",
    "title": "Parallel Routes",
    "description": "\nParallel Routing allows you to simultaneously or conditionally render one or more pages in the same layout.\nFor highly dynamic sections of an app, such as dashboards and feeds on social sites, Parallel Routing can be used to implement complex routing patterns.\n\nSlots(@) are not route segments and do not affect the URL structure.\n    ",
    "doc": "https://nextjs.org/docs/app/building-your-application/routing/parallel-routes"
  },
  "codes": {
    "@left/default.tsx": "import { Boundary } from \"@/app/_components/boundary\";\n\nexport default function Default() {\n  return (\n    <Boundary label=\"Left Default\" filePath=\"@left/default.tsx\">\n      default\n    </Boundary>\n  );\n}\n",
    "@left/error.tsx": "\"use client\";\n\ntype Props = {\n  error: Error & { digest?: string };\n  reset: () => void;\n};\n\nexport default function ErrorComponent({ error }: Props) {\n  return <span>{error.message}</span>;\n}\n",
    "@left/page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { Suspense } from \"react\";\nimport { Loading } from \"../_components/loading\";\n\nasync function Main() {\n  await new Promise((resolve) => setTimeout(resolve, 2000));\n\n  // TODO: app router has a bug related to having errors in parallel routes.\n  // dev works but prod doesn't.\n  // if (Date.now() % 2 === 0) {\n  //   throw new Error(\"error ü•≤\");\n  // }\n\n  return (\n    <Boundary label=\"Left\" filePath=\"@left/page.tsx\">\n      hi üòÅ\n    </Boundary>\n  );\n}\n\nexport default async function Page() {\n  return (\n    <Suspense fallback={<Loading />}>\n      <Main />\n    </Suspense>\n  );\n}\n",
    "@right/default.tsx": "import { Boundary } from \"@/app/_components/boundary\";\n\nexport default function Default() {\n  return (\n    <Boundary label=\"Right Default\" filePath=\"@right/default.tsx\">\n      default\n    </Boundary>\n  );\n}\n",
    "@right/only-right/page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\n\nexport default function Page() {\n  return (\n    <Boundary label=\"Right\" filePath=\"@right/only-right/page.tsx\">\n      üåù\n    </Boundary>\n  );\n}\n",
    "@right/page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { Suspense } from \"react\";\nimport { Loading } from \"../_components/loading\";\n\nasync function Main() {\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n\n  return (\n    <Boundary label=\"Right\" filePath=\"@right/page.tsx\">\n      hi üòÅ\n    </Boundary>\n  );\n}\n\nexport default function Page() {\n  return (\n    <Suspense fallback={<Loading />}>\n      <Main />\n    </Suspense>\n  );\n}\n",
    "_components/loading.tsx": "import { Boundary } from \"@/app/_components/boundary\";\n\nexport function Loading() {\n  return <Boundary label=\"Loading\">Loading...</Boundary>;\n}\n",
    "default.tsx": "import { Boundary } from \"@/app/_components/boundary\";\n\nexport default function Default() {\n  return (\n    <Boundary label=\"Root Default\" filePath=\"default.tsx\">\n      <p>\n        root and @left don't have \"only-right\" dir so they will fallback to the\n        default.tsx\n      </p>\n    </Boundary>\n  );\n}\n",
    "layout.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { type PropsWithChildren } from \"react\";\n\ntype Props = PropsWithChildren<{\n  left: React.ReactNode;\n  right: React.ReactNode;\n}>;\n\nexport default function Layout({ left, right, children }: Props) {\n  return (\n    <Boundary label=\"Root Layout\" filePath=\"layout.tsx\">\n      <div className=\"flex flex-col gap-6\">\n        <div className=\"flex gap-4\">\n          <div className=\"w-1/2\">{left}</div>\n          <div className=\"w-1/2\">{right}</div>\n        </div>\n        {children}\n      </div>\n    </Boundary>\n  );\n}\n",
    "page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { Link } from \"@/app/_components/link\";\n\n// turn off full route cache for demo\nexport const dynamic = \"force-dynamic\";\n\nexport default function Page() {\n  return (\n    <Boundary label=\"Root Page\" filePath=\"page.tsx\">\n      <div className=\"flex flex-col gap-4\">\n        <p>\n          By using Slot(`@`), you can define independent errors and loading\n          states for each route at the same time.\n        </p>\n        <Link href=\"/examples/parallel/only-right\">\n          check the default.tsx bahavior\n        </Link>\n      </div>\n    </Boundary>\n  );\n}\n"
  }
}